generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ServiceCategory {
  funeral
  grooming
  custom_vehicles
  other_care
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

//
// ========== MODELS ==========
//

model User {
  user_id      String   @id @default(uuid()) @db.Uuid
  email        String   @unique
  name         String
  phone        String?
  profileImage String?
  address      String?
  role         String
  createdAt    DateTime @default(now())

  // Relations
  pets                  Pet[]
  services              Service[]              @relation("UserServices")        // 사업자가 등록한 서비스들
  reservations          Reservation[]          @relation("UserReservations")    // 예약한 유저로서의 예약
  businessReservations  Reservation[]          @relation("BusinessReservations")// 사업자로서 받은 예약
  notifications         Notification[]         @relation("UserNotifications")   // 유저의 알림들
}

model Pet {
  pet_id     String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  name       String
  species    String
  breed      String?
  age        Int?
  weight     Float?
  photo      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user         User         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  reservations Reservation[]
}

model Service {
  service_id        String   @id @default(uuid()) @db.Uuid
  business_id       String   @db.Uuid
  name              String
  description       String
  price             Decimal
  duration          Int
  available_time    Json?
  location          String
  latitude          Float
  longitude         Float
    is_deleted Boolean  @default(false)
  category          ServiceCategory
  avg_rating        Float     @default(0)
  review_count      Int       @default(0)
  likes             Int       @default(0)
  pending_count     Int       @default(0)
  confirmed_count   Int       @default(0)
  canceled_count    Int       @default(0)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  business      User          @relation("UserServices", fields: [business_id], references: [user_id])
  reservations  Reservation[]

  @@map("services") // 실제 테이블명 지정
}

model Reservation {
  reservation_id   String   @id @default(uuid()) @db.Uuid 
  user_id          String   @db.Uuid
  service_id       String   @db.Uuid
  business_id      String   @db.Uuid
  pet_id           String   @db.Uuid
  date             DateTime
  time             String
  status           ReservationStatus
  notes            String?
  price Decimal @default(0)


  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // Relations
  user       User     @relation("UserReservations", fields: [user_id], references: [user_id])
  business   User     @relation("BusinessReservations", fields: [business_id], references: [user_id])
  service    Service  @relation(fields: [service_id], references: [service_id])
  pet        Pet      @relation(fields: [pet_id], references: [pet_id])

  @@map("reservations")
}

model Notification {
  notification_id String   @id @default(uuid()) @db.Uuid
  user_id         String   @db.Uuid
  message         String
  type            String   // 'reservation', 'system', 'etc'
  is_read         Boolean  @default(false)
  created_at      DateTime @default(now())
  user            User     @relation("UserNotifications", fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("notifications") // 실제 테이블명
}
