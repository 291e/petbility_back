generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id               String                  @id @default(uuid()) @db.Uuid
  email                 String                  @unique
  name                  String
  phone                 String?
  profileImage          String?
  address               String?
  role                  String
  createdAt             DateTime                @default(now())
  latitude              Float?
  longitude             Float?
  businessAvailableTime BusinessAvailableTime[] @relation("BusinessAvailableTime")
  pets                  Pet[]
  notifications         Notification[]          @relation("UserNotifications")
  businessReservations  Reservation[]           @relation("BusinessReservations")
  reservations          Reservation[]           @relation("UserReservations")
  services              Service[]               @relation("UserServices")
}

model Pet {
  pet_id       String        @id @default(uuid()) @db.Uuid
  user_id      String        @db.Uuid
  name         String
  species      String
  breed        String?
  age          Int?
  weight       Float?
  photo        String?
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  user         User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  reservations Reservation[]
}

model Service {
  service_id            String                  @id @default(uuid()) @db.Uuid
  name                  String
  description           String
  price                 Decimal
  category              ServiceCategory
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  admin_id              String                  @db.Uuid
  businessAvailableTime BusinessAvailableTime[]
  reservations          Reservation[]
  admin                 User                    @relation("UserServices", fields: [admin_id], references: [user_id])

  @@map("services")
}

model BusinessAvailableTime {
  id          String       @id @default(uuid())
  business_id String       @db.Uuid
  day_of_week String?
  start_time  String
  end_time    String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  service_id  String       @db.Uuid
  date        DateTime?
  reason      String?
  type        ScheduleType
  business    User         @relation("BusinessAvailableTime", fields: [business_id], references: [user_id])
  service     Service      @relation(fields: [service_id], references: [service_id])

  @@index([business_id, service_id, type, day_of_week])
  @@index([business_id, service_id, type, date])
}

model Reservation {
  reservation_id String            @id @default(uuid()) @db.Uuid
  user_id        String            @db.Uuid
  service_id     String            @db.Uuid
  business_id    String            @db.Uuid
  pet_id         String            @db.Uuid
  status         ReservationStatus
  notes          String?
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  price          Decimal           @default(0)
  reserved_at    DateTime
  business       User              @relation("BusinessReservations", fields: [business_id], references: [user_id], onDelete: Cascade)
  pet            Pet               @relation(fields: [pet_id], references: [pet_id], onDelete: Cascade)
  service        Service           @relation(fields: [service_id], references: [service_id], onDelete: Cascade)
  user           User              @relation("UserReservations", fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("reservations")
}

model Notification {
  notification_id String           @id @default(uuid()) @db.Uuid
  user_id         String           @db.Uuid
  message         String
  is_read         Boolean          @default(false)
  created_at      DateTime         @default(now())
  metadata        Json?
  title           String
  updated_at      DateTime         @updatedAt
  type            NotificationType
  user            User             @relation("UserNotifications", fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id, is_read])
  @@index([created_at])
  @@map("notifications")
}

enum ServiceCategory {
  funeral
  grooming
  custom_vehicles
  other_care
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
  IN_PROGRESS
  REJECTED
  NO_SHOW
}

enum ScheduleType {
  WEEKLY
  EXCEPTION
}

enum NotificationType {
  RESERVATION_CREATED
  RESERVATION_UPDATED
  RESERVATION_CANCELED
  RESERVATION_ACCEPTED
  RESERVATION_REJECTED
  RESERVATION_COMPLETED
  RESERVATION_REMINDER
  REVIEW_REQUESTED
  REVIEW_RECEIVED
  PAYMENT_COMPLETED
  PAYMENT_FAILED
  SYSTEM
}
